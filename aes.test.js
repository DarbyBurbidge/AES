import { runAES, KeyExpansion, SubBytes, AddRoundKey, ShiftRows, MixColumns, RemoveRoundKey } from "./scripts/aes";
//import { KeyExpansion } from "./scripts/aes";


test("the whole aes encryption", () => {
    expect(runAES("asdf")).toBe("f1 e3 5a a7 35 62 27 f6 69 cd 0d 28 3e fc af ad");
});

test("testing byte conversion on string", () => {
    const state = "asdf"
    let newState = []
    for(let i = 0; i < state.length;i++) {
        newState[i] = Number(state.charCodeAt(i));  
    }
    expect(newState).toStrictEqual([0x61,0x73,0x64,0x66]);
})

test("key expansion", () => {
    const key = [0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10];
    const expansion = [];
    KeyExpansion(key, expansion);
    expect(expansion).toStrictEqual([
        0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,
        0xab,0x74,0xc9,0xd3,0xae,0x72,0xce,0xdb,0xa7,0x78,0xc5,0xd7,0xaa,0x76,0xca,0xc7,
        0x91,0x00,0x0f,0x7f,0x3f,0x72,0xc1,0xa4,0x98,0x0a,0x04,0x73,0x32,0x7c,0xce,0xb4,
        0x85,0x8b,0x82,0x5c,0xba,0xf9,0x43,0xf8,0x22,0xf3,0x47,0x8b,0x10,0x8f,0x89,0x3f,
        0xfe,0x2c,0xf7,0x96,0x44,0xd5,0xb4,0x6e,0x66,0x26,0xf3,0xe5,0x76,0xa9,0x7a,0xda,
        0x3d,0xf6,0xa0,0xae,0x79,0x23,0x14,0xc0,0x1f,0x05,0xe7,0x25,0x69,0xac,0x9d,0xff,
        0x8c,0xa8,0xb6,0x57,0xf5,0x8b,0xa2,0x97,0xea,0x8e,0x45,0xb2,0x83,0x22,0xd8,0x4d,
        0x5f,0xc9,0x55,0xbb,0xaa,0x42,0xf7,0x2c,0x40,0xcc,0xb2,0x9e,0xc3,0xee,0x6a,0xd3,
        0xf7,0xcb,0x33,0x95,0x5d,0x89,0xc4,0xb9,0x1d,0x45,0x76,0x27,0xde,0xab,0x1c,0xf4,
        0x8e,0x57,0x8c,0x88,0xd3,0xde,0x48,0x31,0xce,0x9b,0x3e,0x16,0x10,0x30,0x22,0xe2,
        0xbc,0xc4,0x14,0x42,0x6f,0x1a,0x5c,0x73,0xa1,0x81,0x62,0x65,0xb1,0xb1,0x40,0x87]);
});

test("addRoundKey", () => {
    const state = [0x61,0x53,0x13,0x66];
    AddRoundKey(state, expandedKey, 0);
    expect(state).toStrictEqual([
        0x60,0x51,0x10,0x62,0x05,0x06,0x07,0x08,0x09,0x0A,0x0b,0x0c,0x0d,0x0e,0x0f,0x10
    ]);
});

test("subbing bytes", () => {
    const state = [0x60,0x51,0x10,0x62,0x05,0x06,0x07,0x08,0x09,0x0A,0x0b,0x0c,0x0d,0x0e,0x0f,0x10];
    SubBytes(state);
    expect(state).toStrictEqual([0xd0,0xd1,0xca,0xaa,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca])
});

test("shifting Rows", () => {
    const state = [0xd0,0xd1,0xca,0xaa,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca];
    ShiftRows(state);
    expect(state).toStrictEqual([0xd0,0x6f,0x2b,0xca,0x6b,0x67,0x76,0xaa,0x01,0xab,0xca,0x30,0xd7,0xd1,0xc5,0xfe])
});

test("Mixing Columns", () => {
    const state = [0xd0,0x6f,0x2b,0xca,0x6b,0x67,0x76,0xaa,0x01,0xab,0xca,0x30,0xd7,0xd1,0xc5,0xfe];
    MixColumns(state);
    expect(state).toStrictEqual([0xeb,0xb9,0xac,0xa0,0xa3,0x95,0x05,0xe3,0x1e,0x39,0x75,0x02,0xe6,0xc4,0x8e,0x91])
});



//Decrypt tests

test("removing the key", () => {
    let state = [0xb6, 0x4b, 0x27, 0xbb, 0x16, 0x15, 0xa6, 0xf5, 0x32, 0x18, 0x6c, 0xc5, 0xfa, 0x94, 0xb5, 0x5e];
    RemoveRoundKey(state, expandedKey, 10);
    expect(state).toStrictEqual([0x0a, 0x8f, 0x33, 0xf9, 0x79, 0x0f, 0xfa, 0x86, 0x93, 0x99, 0x0e, 0xa0, 0x4b, 0x25, 0xf5, 0xd9])
})


    const expandedKey = [
        0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,
        0xab,0x74,0xc9,0xd3,0xae,0x72,0xce,0xdb,0xa7,0x78,0xc5,0xd7,0xaa,0x76,0xca,0xc7,
        0x91,0x00,0x0f,0x7f,0x3f,0x72,0xc1,0xa4,0x98,0x0a,0x04,0x73,0x32,0x7c,0xce,0xb4,
        0x85,0x8b,0x82,0x5c,0xba,0xf9,0x43,0xf8,0x22,0xf3,0x47,0x8b,0x10,0x8f,0x89,0x3f,
        0xfe,0x2c,0xf7,0x96,0x44,0xd5,0xb4,0x6e,0x66,0x26,0xf3,0xe5,0x76,0xa9,0x7a,0xda,
        0x3d,0xf6,0xa0,0xae,0x79,0x23,0x14,0xc0,0x1f,0x05,0xe7,0x25,0x69,0xac,0x9d,0xff,
        0x8c,0xa8,0xb6,0x57,0xf5,0x8b,0xa2,0x97,0xea,0x8e,0x45,0xb2,0x83,0x22,0xd8,0x4d,
        0x5f,0xc9,0x55,0xbb,0xaa,0x42,0xf7,0x2c,0x40,0xcc,0xb2,0x9e,0xc3,0xee,0x6a,0xd3,
        0xf7,0xcb,0x33,0x95,0x5d,0x89,0xc4,0xb9,0x1d,0x45,0x76,0x27,0xde,0xab,0x1c,0xf4,
        0x8e,0x57,0x8c,0x88,0xd3,0xde,0x48,0x31,0xce,0x9b,0x3e,0x16,0x10,0x30,0x22,0xe2,
        0xbc,0xc4,0x14,0x42,0x6f,0x1a,0x5c,0x73,0xa1,0x81,0x62,0x65,0xb1,0xb1,0x40,0x87
    ]